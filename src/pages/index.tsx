import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Image from "next/image";
import { api } from "~/utils/api";
import { type RouterOutputs } from "~/utils/api";
import { type NextPage } from "next";

import dayjs from "dayjs"; // For Time since last msg.
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime) // req'd by lib


const CreatePostWizard = () => {
  const { user } = useUser();
  if (!user) return null;
  return (
    <div className="flex gap-3 w-full">
      <Image src={user.profileImageUrl} alt="profile image"
        className="h-16 w-16 rounded-full"
        width="64" height="64"
      />
      <input placeholder="An Input placeholder"
        className="grow bg-transparent outline-none"
      />
      <div className="block end-0 text-slate-400 font-thin italic"><SignOutButton /></div>
    </div>
  )
}

// RouterOutputs helper from TRPC
// without the final `[number]`, it would return an array of PostWithUser, not a single Post
type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { user } = useUser();
  if (!user) return null;

  const { post, author } = props;
  const timeAgo = dayjs(post.createdAt).fromNow();

  return (
    <div key={post.id} className="flex gap-3 border-b border-slate-400 p-4 ">
      <Image src={author.profileImageUrl} alt="profile picture"
        className="h-12 w-12 rounded-full justify-items-center"
        width="64" height="64"
      />
      <div className="flex flex-col ">
        <div className="flex text-slate-300">
          <span>@{author.username}</span> &nbsp; &bull; &nbsp; <span className="font-thin">{timeAgo}</span>
        </div>
        <div className="post-text">
          <span>{post.content}</span>
        </div>
      </div>
    </div>
  )
}

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const user = useUser();

  const { data, isLoading } = api.posts.getAll.useQuery(); // Edge Function run on Vercel

  if (isLoading) { return (<div>Loading...</div>) }
  if (!data) { return (<div>I&apos;m sorry Dave. Something went wrong. I&apos;m afraid I can&apos;t do that</div>) }

  return (
    <>
      <Head>
        <title>Appity App</title>
        <meta name="description" content="Generated by r-i-c-h" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!user.isSignedIn && (<div className="flex w-full p-4 justify-center"><SignInButton /></div>)}
            {user.isSignedIn && <CreatePostWizard />}
          </div>
          <div className="data-inbound flex flex-col">
            {[...data]?.map((fullPost) => (
              <PostView key={fullPost.post.id} {...fullPost} />
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
